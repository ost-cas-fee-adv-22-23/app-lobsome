name: 'Build, push and deploy'

on:
  workflow_call:

permissions:
  contents: read

jobs:
  build:
    name: 'Build docker container and push to gcp'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Google Cloud Registry
        uses: docker/login-action@v2
        with:
          registry: europe-west6-docker.pkg.dev/mumble-389511
          username: _json_key
          password: ${{ secrets.GCR_JSON_KEY }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            europe-west6-docker.pkg.dev/mumble-389511/mumble-repo/app-lobsome:latest
            europe-west6-docker.pkg.dev/mumble-389511/mumble-repo/app-lobsome:${{ github.sha }}
          secrets: |
            "npm=${{ secrets.NPM_RC }}"

  terraform:
    name: 'Terraform deploy to gcp'
    runs-on: ubuntu-latest
    environment: production
    needs: build

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Google Cloud Credentials
        uses: google-github-actions/auth@v0
        with:
          credentials_json: '${{ secrets.GCR_JSON_KEY }}'

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
